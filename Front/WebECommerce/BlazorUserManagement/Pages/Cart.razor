@page "/cart"
@using BlazorUserManagement.Models
@using BlazorUserManagement.Services
@inject CartService CartService
@inject IJSRuntime JSRuntime

<PageTitle>Carrito de Compras - La Tienda de Don Juan</PageTitle>

<div class="max-w-6xl mx-auto">
    <div class="bg-white rounded-lg shadow-lg p-6">
        <!-- Header del Carrito -->
        <div class="flex items-center justify-between mb-8">
            <div class="flex items-center">
                <svg class="w-8 h-8 text-indigo-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.1 5H17M9 19.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM20.5 19.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></path>
                </svg>
                <h1 class="text-3xl font-bold text-gray-900">Carrito de Compras</h1>
            </div>
            @if (cartProducts.Any())
            {
                <div class="text-sm text-gray-600">
                    @cartProducts.Count @(cartProducts.Count == 1 ? "producto" : "productos")
                </div>
            }
        </div>

        @if (isLoading)
        {
            <!-- Loading State -->
            <div class="flex justify-center items-center py-16">
                <svg class="animate-spin h-12 w-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="ml-3 text-lg text-gray-600">Cargando productos...</span>
            </div>
        }
        else if (!cartProducts.Any())
        {
            <!-- Carrito Vacío -->
            <div class="text-center py-16">
                <svg class="w-24 h-24 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.1 5H17M9 19.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM20.5 19.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></path>
                </svg>
                <h3 class="text-xl font-semibold text-gray-900 mb-2">Tu carrito está vacío</h3>
                <p class="text-gray-600 mb-6">¡Agrega algunos productos para comenzar a comprar!</p>
                
                <a href="/" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 transition-colors">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    Continuar Comprando
                </a>
            </div>
        }
        else
        {
            <!-- Lista de Productos -->
            <div class="space-y-4 mb-8">
                @foreach (var product in cartProducts)
                {
                    <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div class="flex items-center justify-between">
                            <!-- Información del Producto -->
                            <div class="flex-1">
                                <div class="flex items-start justify-between">
                                    <div class="flex-1 mr-4">
                                        <h3 class="text-lg font-semibold text-gray-900 mb-2">@product.Name</h3>
                                        <p class="text-gray-600 text-sm mb-3 line-clamp-2">@product.Description</p>
                                        
                                        <div class="flex items-center space-x-4">
                                            <div class="flex items-center">
                                                <span class="text-sm text-gray-500 mr-2">Cantidad:</span>
                                                <span class="bg-gray-100 px-3 py-1 rounded-full text-sm font-medium">@product.Quantity</span>
                                            </div>
                                            <div class="flex items-center">
                                                <span class="text-sm text-gray-500 mr-2">Precio unitario:</span>
                                                <span class="text-lg font-semibold text-indigo-600">$@product.Price.ToString("F2")</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Precio Total y Botón Eliminar -->
                                    <div class="flex flex-col items-end space-y-3">
                                        <div class="text-right">
                                            <p class="text-sm text-gray-500">Subtotal</p>
                                            <p class="text-xl font-bold text-gray-900">$@((product.Price * product.Quantity).ToString("F2"))</p>
                                        </div>
                                        
                                        <button @onclick="() => RemoveProduct(product.ProductId)" 
                                                disabled="@removingProducts.Contains(product.ProductId)"
                                                class="flex items-center px-3 py-2 text-sm font-medium text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                            @if (removingProducts.Contains(product.ProductId))
                                            {
                                                <svg class="animate-spin h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                </svg>
                                                <span>Eliminando...</span>
                                            }
                                            else
                                            {
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                                <span>Eliminar</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Resumen del Total -->
            <div class="border-t border-gray-200 pt-6">
                <div class="bg-gray-50 rounded-lg p-6">
                    <div class="flex justify-between items-center mb-4">
                        <span class="text-lg font-medium text-gray-900">Total de productos:</span>
                        <span class="text-lg font-medium text-gray-900">@cartProducts.Sum(p => p.Quantity)</span>
                    </div>
                    <div class="flex justify-between items-center mb-6">
                        <span class="text-2xl font-bold text-gray-900">Total a pagar:</span>
                        <span class="text-3xl font-bold text-indigo-600">$@GetTotalPrice().ToString("F2")</span>
                    </div>
                    
                    <div class="flex flex-col sm:flex-row gap-4">
                        <button class="flex-1 bg-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-indigo-700 transition-colors">
                            Proceder al Pago
                        </button>
                        <a href="/" class="flex-1 bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-colors text-center">
                            Continuar Comprando
                        </a>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="mt-4 p-4 rounded-md @(isSuccess ? "bg-green-50 text-green-800 border border-green-200" : "bg-red-50 text-red-800 border border-red-200")">
                <div class="flex">
                    <div class="flex-shrink-0">
                        @if (isSuccess)
                        {
                            <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        }
                        else
                        {
                            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        }
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium">@message</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@code {
 
   private List<CartProduct> cartProducts = new List<CartProduct>();
    private HashSet<string> removingProducts = new HashSet<string>();
    private bool isLoading = true;
    private string message = string.Empty;
    private bool isSuccess = false;
    
    // Por ahora usamos un userId fijo, en una implementación real esto vendría del usuario autenticado
    private string currentUserId = "4";

    protected override async Task OnInitializedAsync()
    {
        await LoadCartProducts();
    }

    private async Task LoadCartProducts()
    {
        isLoading = true;
        message = string.Empty;
        StateHasChanged();

        try
        {
            cartProducts = await CartService.GetCartProductsAsync(currentUserId);
        }
        catch (Exception ex)
        {
            message = $"Error al cargar los productos del carrito: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RemoveProduct(string productId)
    {
        removingProducts.Add(productId);
        message = string.Empty;
        StateHasChanged();

        try
        {
            var success = await CartService.RemoveProductFromCartAsync(currentUserId, productId);
            
            if (success)
            {
                cartProducts.RemoveAll(p => p.ProductId == productId);
                message = "Producto eliminado del carrito exitosamente";
                isSuccess = true;
            }
            else
            {
                message = "Error al eliminar el producto del carrito";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            removingProducts.Remove(productId);
            StateHasChanged();
            
            // Limpiar el mensaje después de 3 segundos
            if (isSuccess)
            {
                await Task.Delay(3000);
                message = string.Empty;
                StateHasChanged();
            }
        }
    }

    private decimal GetTotalPrice()
    {
        return cartProducts.Sum(p => p.Price * p.Quantity);
    }
}