@page "/categories/{categoryId:int}"
@using BlazorUserManagement.Models
@using BlazorUserManagement.Services
@inject CategoryService CategoryService
@inject ProductService ProductService
@inject CartService CartService
@inject IJSRuntime JSRuntime
@using System.Globalization

<PageTitle>@(currentCategory?.Name ?? "Categoría") - La Tienda de Don Juan</PageTitle>

<div class="max-w-7xl mx-auto">
    @if (currentCategory != null)
    {
        <!-- Header de la Categoría -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">@currentCategory.Name</h1>
                    <p class="text-gray-600 mt-2">@currentCategory.Description</p>
                </div>
                <div class="text-right">
                    <span class="text-sm text-gray-500">@products.Count productos encontrados</span>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <!-- Loading State -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="animate-pulse">
                <div class="h-8 bg-gray-200 rounded w-1/3 mb-4"></div>
                <div class="h-4 bg-gray-200 rounded w-2/3"></div>
            </div>
        </div>
    }
    else
    {
        <!-- Error State -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="text-center">
                <h1 class="text-3xl font-bold text-gray-900 mb-4">Categoría no encontrada</h1>
                <p class="text-gray-600 mb-6">La categoría que buscas no existe o no está disponible.</p>
                <a href="/" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                    Volver al inicio
                </a>
            </div>
        </div>
    }

    <!-- Filtros y Ordenamiento -->
    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
        <div class="flex flex-wrap items-center justify-between gap-4">
            <div class="flex items-center space-x-4">
                <label class="text-sm font-medium text-gray-700">Ordenar por:</label>
                <select class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <option>Más relevantes</option>
                    <option>Precio: menor a mayor</option>
                    <option>Precio: mayor a menor</option>
                    <option>Más nuevos</option>
                    <option>Mejor valorados</option>
                </select>
            </div>
            <div class="flex items-center space-x-2">
                <button class="p-2 border border-gray-300 rounded-md hover:bg-gray-50">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                    </svg>
                </button>
                <button class="p-2 border border-gray-300 rounded-md hover:bg-gray-50">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Grid de Productos -->
    @if (isLoadingProducts)
    {
        <!-- Loading State para Productos -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @for (int i = 0; i < 8; i++)
            {
                <div class="bg-white rounded-lg shadow-sm overflow-hidden animate-pulse">
                    <div class="w-full h-64 bg-gray-200"></div>
                    <div class="p-4">
                        <div class="h-4 bg-gray-200 rounded mb-2"></div>
                        <div class="h-3 bg-gray-200 rounded mb-3"></div>
                        <div class="h-6 bg-gray-200 rounded mb-3"></div>
                        <div class="h-4 bg-gray-200 rounded mb-3"></div>
                        <div class="h-8 bg-gray-200 rounded"></div>
                    </div>
                </div>
            }
        </div>
    }
    else if (products.Any())
    {
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @foreach (var product in products)
            {
                <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden">
                    <!-- Imagen del Producto -->
                    <div class="aspect-w-1 aspect-h-1 bg-gray-200 relative">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" alt="@product.Name" class="w-full h-64 object-cover" 
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        }
                        <div class="w-full h-64 bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center @(!string.IsNullOrEmpty(product.ImageUrl) ? "hidden" : "")">
                            <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                        </div>
                        
                        <!-- Badges -->
                        @if (product.Stock <= 5 && product.Stock > 0)
                        {
                            <div class="absolute top-2 left-2 bg-orange-500 text-white px-2 py-1 text-xs font-semibold rounded">
                                ÚLTIMAS UNIDADES
                            </div>
                        }
                        @if (product.Stock == 0)
                        {
                            <div class="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 text-xs font-semibold rounded">
                                AGOTADO
                            </div>
                        }
                        @if (product.Rating >= 4.5)
                        {
                            <div class="absolute top-2 right-2 bg-yellow-500 text-white px-2 py-1 text-xs font-semibold rounded">
                                ⭐ TOP
                            </div>
                        }
                    </div>
                    
                    <!-- Información del Producto -->
                    <div class="p-4">
                        <h3 class="text-sm font-medium text-gray-900 mb-2 line-clamp-2">
                            @product.Name
                        </h3>
                        <p class="text-xs text-gray-500 mb-3 line-clamp-3">
                            @product.Description
                        </p>
                        <input type="hidden" value="@product.Id" />
                        <!-- Precio -->
                        <div class="flex items-center justify-between mb-3">
                            <span class="text-lg font-bold text-gray-900">$@product.Price.ToString("F2")</span>
                            @if (product.Stock > 0)
                            {
                                <span class="text-xs text-green-600 font-medium">@product.Stock disponibles</span>
                            }
                            else
                            {
                                <span class="text-xs text-red-600 font-medium">Sin stock</span>
                            }
                        </div>
                        
                        <!-- Rating -->
                        <div class="flex items-center mb-3">
                            @for (int star = 1; star <= 5; star++)
                            {
                                <svg class="w-4 h-4 @(star <= Math.Floor(product.Rating) ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                            <span class="text-xs text-gray-500 ml-2">(@product.Rating.ToString("F1"))</span>
                        </div>
                        
                        <!-- Botón de Agregar al Carrito -->
                        <button @onclick="() => AddToCart(product.Id)" 
                                class="w-full py-2 px-4 rounded-md transition-colors text-sm font-medium @(product.Stock > 0 && !IsAddingToCart(product.Id) ? "bg-indigo-600 text-white hover:bg-indigo-700" : "bg-gray-300 text-gray-500 cursor-not-allowed")" 
                                disabled="@(product.Stock == 0 || IsAddingToCart(product.Id))">
                            @if (product.Stock == 0)
                            {
                                <span>Sin Stock</span>
                            }
                            else if (IsAddingToCart(product.Id))
                            {
                                <span class="flex items-center justify-center">
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    Agregando...
                                </span>
                            }
                            else
                            {
                                <span>Agregar al Carrito</span>
                            }
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else if (!isLoadingProducts)
    {
        <!-- Estado sin productos -->
        <div class="text-center py-16">
            <svg class="w-24 h-24 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 13H7"></path>
            </svg>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay productos disponibles</h3>
            <p class="text-gray-600 mb-6">Esta categoría no tiene productos activos en este momento.</p>
            <a href="/" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 transition-colors">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Volver al inicio
            </a>
        </div>
    }

    <!-- Paginación -->
    @if (products.Any())
    {
        <div class="mt-8 flex justify-center">
            <nav class="flex items-center space-x-2">
                <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                    Anterior
                </button>
                <button class="px-3 py-2 text-sm font-medium text-white bg-indigo-600 border border-indigo-600 rounded-md">
                    1
                </button>
                <button class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                    2
                </button>
                <button class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                    3
                </button>
                <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                    Siguiente
                </button>
            </nav>
        </div>
    }
</div>

@code {
    [Parameter] public int CategoryId { get; set; }
    
    private ProductCategory? currentCategory;
    private List<Product> products = new List<Product>();
    private bool isLoading = true;
    private bool isLoadingProducts = true;
    private HashSet<int> productsBeingAdded = new HashSet<int>();
    private const int DEFAULT_USER_ID = 4; // ID de usuario por defecto como especificaste

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        isLoadingProducts = true;
        StateHasChanged();

        try
        {
            // Cargar categoría
            var categories = await CategoryService.GetAllActiveCategoriesAsync();
            currentCategory = categories.FirstOrDefault(c => c.Id == CategoryId);

            // Cargar productos de la categoría
            if (currentCategory != null)
            {
                products = await ProductService.GetByCategoryActiveAsync(CategoryId);
            }
        }
        catch (Exception)
        {
            currentCategory = null;
            products = new List<Product>();
        }
        finally
        {
            isLoading = false;
            isLoadingProducts = false;
            StateHasChanged();
        }
    }

    private bool IsAddingToCart(int productId)
    {
        return productsBeingAdded.Contains(productId);
    }

    private async Task AddToCart(int productId)
    {
        if (productsBeingAdded.Contains(productId))
            return;

        productsBeingAdded.Add(productId);
        StateHasChanged();

        try
        {
            // Crear el item del carrito con los parámetros exactos que especificaste
            var cartItem = new CartItem
            {
                Id = 0,
                UserId = DEFAULT_USER_ID,
                ProductId = productId,
                Quantity = 1
            };

            var success = await CartService.AddItemToCartAsync(cartItem);
            
            if (success)
            {
                // Mostrar mensaje de éxito
                await JSRuntime.InvokeVoidAsync("alert", "Producto agregado al carrito exitosamente");
            }
            else
            {
                // Mostrar mensaje de error
                await JSRuntime.InvokeVoidAsync("alert", "Error al agregar el producto al carrito. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            // Mostrar mensaje de error con detalles
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            productsBeingAdded.Remove(productId);
            StateHasChanged();
        }
    }
}